【第一天】

Html 三部分
1：文档声明 
文档声明很重要，直接影响浏览器的渲染效果。
不属于html文档的一部分，不用闭合。
2：head区域
<title></title> 网页的标题
   <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

3: body区域
Body区域放各种标签和内容 
而内容不能够直接写在body里面。

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="zh-CN">
<head>
<title>这真的是标题？</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="description" content="" />
<meta name="keywords" content="" />
</head>
<body>
    Hello world 
</body>
</html>

3.5:meta ---- head里面的meta 代表 "元信息",用来说明网页自身的信息,
一般是给浏览器,搜索引擎看的
比如:
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
  --->告诉浏览器,这是一篇utf-8编码的文档
<meta name="description" content="" />
-->这是告诉搜索引擎本页面的主要内容
<meta name="keywords" content="" />
-->这是告诉搜索引擎,本页面体现的关键字

3.6:在网页源码里写的换行,在网页效果上不会体现出来

3.7: html标记:分为双标签和单标签
例: <b>加粗效果,文字会变粗</b>
接下来会换行<br />

共同点: 无论是单双标签,都要求 "闭合"
单标签也要自身闭合 <br >

3.8: 标签可以嵌套,但是, 不能相互嵌套
例如: <b><i>一岁一枯荣.</b></i> 不合法

【页面布局】

当拿到一张图片或者准备做一个页面的时候,
首先,不要去看文字,颜色等细节,
而是总整体上,看页面该如何划分,划分成"块"

按"从上到下","从左到右","从大到小"


Div布局,
Css控制显示效果
标签体现语义

Div块状元素的一个重要特点:
无论宽度如何,在浏览上的显示效果都是---独占一行

盒模型:
一个div是一个矩形,为了方便控制div的效果,
我们推荐把div理解成"一个木头盒子"

分析现实中的情况:

一个盒子: 有边框(边框有多厚? 用像素自定义)
盒子内部的内容,离边框内部有多远的距离,还是说可以贴着内边框放置?
内容离内边框的距离叫做-----内边距
盒子本身有一个大小 : 宽,和 ,高
盒子与盒子之间可以保持距离: 外边距

宽:Width
高:height
边框: border
内边距:padding
外边距:margin

【第二天：】

目标：掌握盒模型

浏览器对于div,p,li标签等元素，可能会对他们设置一个默认的margin值，border，padding值，而且不同的浏览器之间设的默认可能不同。

Css初始化，就是把所有的标签，margin,border,padding设为0，大家都在同一个起跑线上。

盒模型border学习
Border: 三要素，不可缺少。
边框样式， 边框宽度， 边框颜色

分别指定：
Border-style
Border-width
Border-color

例：border-style:solid;
    border-width:10px;
    border-color:blue;

Css里, *能够选中页面上的"所有"元素,因此,叫做通配选择器.

* {margin:0; 
Padding:0;
Bordcer:0;
}
是一种很常用,但是效率不是很高的初始化方法.
但是,我们先掌握初始化的意义和方法.

详解margin:

详解margin:
Margin: 10px; 是设置4个方向上的margin值,都为10px;
Margin:10px 20px 30px 40px ,则分别是设置 上,右,下，左方向上的margin值
如果margin值只设置了2个,或3个,
则按上,右,下,左的方向顺序来分配,没有被分配到值的边, 以对边的margin为准


也可以用margin-top/right/bottom/left 来分别设置4个方向的值


如何用margin来居中
可以通过设置margin: 0 auto; 即,左右的外边距为"自动",即可使左右居中

注意: css只支持用auto来进行左右居中,竖直方向用auto无效.

Margin 外边距有重叠效果
就是在竖直方向,当两个元素的外边距连在一块时,两者的距离并不是两者margin之和,而是取最大margin为准
对于漂浮(float)的元素,外边距不存在重叠效果,也就是说:上下边距为两者的margin之和

【内边距padding的探讨:】

1:4个方向上的padding定义和margin一样.
2:padding是透明的, 也就是说, padding区域的颜色是盒子的背景色.
或者说:盒子的背景色铺到 盒子的内边框处

边框的指定方式: border: 形状 宽度  颜色,
例: border: solid 20px red;

所以如果要想指定4个边框为不同的效果,
可以用:
Border-top/right/bottom/left 来分别指定

4：【引入css文件】

1:直接在html文档的head区域里面，
用<style type="text/css"></style>包围起来。

2: 把css写在专门的.css文件里，
用<link rel="stylesheet" href="xxx.css" type="text/css" />

Css 选择器的概念器:
Css是页面上元素的"档案",那么在管理这些元素的效果之前, 
必须先"找的到"这些元素.

如何找到某一个或某几个元素呢?
这时就会用到"选择器"的概念

选择器就是指"css找到元素的方法"

举例: #header {}, 这种情况就是,以header为id的元素被选中,
这种选择器叫做id选择器.

3:Css文件引入的路径概念【这点很重要，切记】
如果说href="xx.css"  ,浏览器就在网页的同一级目录下来找xx.css
.. (两个点) 代表上一级目录 
. (一个点)  代表当前目录 

4：css 选择器的概念
Css要控制页面元素的显示形式，必须通过一定的方法，指定到该元素。
比如，
1:id选择器， 就是，给页面上的元素起一个不重复的id,
然后css, 通过  #id  ，就能控制该元素。
这个概念称为css选择器。

【类选择器:】
用法:  页面里有<class="类名">来声明类
Css里, 用点+类名来选择这一类的元素.  例: .className{}

【标签选择器:】
因为html有很多种标签,如h1,p,div ,img,这样标签在页面里构成很多元素.
css可以通过标签名来选定页面内标签对应的元素.
比如:
P{}, 会对页面里所有的P标签生效
Div{},img{} ,则会对页面里所有的div,img生效

【派生选择器】
通过元素的上下级关系来进行选择,(像地区由大到小的选择一样)
比如:
#header img{
}
#header ul {
}
则意味着分别选中#header元素下面的所有img元素和ul元素.

【群选择器】
例如:
#header, .intro {}
则意味着, 括号内的css 同时对 #header, .intro 生效

【伪类选择器:】
伪类选择器,选择不是某一种元素,而是某种元素的某种状态
对于链接,我们可以针对的4种状态来设置显示效果.
 链接没被点击过 :link
 链接被点击过 : visited
 鼠标放在链接上 :hover
 鼠标点击的瞬间 :active

顺序: l v, h, a


【通配选择器: 】
* {}, 通配页面上所有元素(效率低,用的较少)

5：Css 基本写法
选择器 {
属性:值;
} 

当竖直方向两个元素的外边距相遇时，元素之间的距离并不是2个元素的margin之和，
而是以较大外边距为准，这个问题 称为边距叠加，不是bug.

【浮动：元素并排的挑战】
（注意：当元素浮动时，不会再发生外边距重叠的情况）

默认状况下，2个块状元素，（如div）,是各自占一行，为了让2个块状元素能并排成列显示，我们需要使用浮动。

对浮动应如何理解？

当元素声明float:left时，立刻原地上升起一定的高度，并尽量靠左边。

【Div 标签的局限?】
Div, divistion, 块,区域的意思,
在Html里,div是负责划分大块区域

Div 是没有"语义性"的
Div 和 h1 标签放在一块比较,最为典型
<div>hello world</div>
<h1>hello world</h1>
两者的显示效果不一样,h1里面的文字大

原因就在于: div仅用来划区域, 至于里面的内容,是标题,还是段落,分析不出来.
而且,对文字的颜色,粗细,大小等并没有影响,
因此,.我们说: div 是没有语义性的, 无语义标签.

但是对于搜索引擎来说, 如果全用div,不利用 seo的优化.

以h1为例,h1里面的文字会被搜索引擎做为分析页面内容时的重要参考.
因为h1代表 "1号大标题", 有其意义,有语义性.

?P: 段落
?H(1-6): 1-6号标题,文字越来越小
?Pre: 保持源码的原样格式输出

有一些内容类型,是div是表达不出来的
比如 要求你在页面内
引入超链接,引入一幅图片, 或者一个flash,或者一段视频
A 超链接, 用法<a href ="" title="" target="">文字或图片</a>
Img 引入图片, 用法 <img src="xxx.gif" alt="图片的文字标签" title="提示文字" />
FlashWmv, 这两个标签,目前各种浏览器的引入方式不一样,

内联元素:
内联元素,又叫"行内元素",w3c组织则称之为"行内框",
网友的经典比喻----"行内元素"就是橡皮筋.
内联元素,只对每一行的文字起作用,或者说: 内联的作用范围,不能跳出行的区域

可以把内联元素当成有弹性的橡皮筋来看，内联元素又被称为"行内元素"

内联元素与块状并不是完全无关的东西,可以相互转换.

可以通过元素的 display 属性来设置.
?Display:block; 强制声明某元素为块状元素
?Display:inline; 强制声明为内联元素.

Display:none; 压根不显示., 设置之后,该元素和该元素的子元素不再显示,
等同于这段代码被删除的效果,在页面内一点空间都不占.

目前我们所学的:
Div,p,h*,pre ,form是块状元素.
A, span, br ,是内联元素

开发中,常碰到图片与下方的块状元素有空白的问题
原因:因为图片是内联元素,所有内联元素结束后,与后面的块状元素有一段空白.
解决: 通过display来转换Img为块状元素,然后再通过margin:0来解决.

?Ul无序列表,ol有序列表
有序列表与无序列表 (都是块状元素)
<ul>
<li>这是列表项</li>
</ul>

<ol>
<li>这是有序列表项</li>
</ol>

通过css能控制列表的3个属性:
List-style-type : 列表项的显示标志
List-style-image: 用于替换显示标志的图片.
List-style-postion:inside/outside ,显示标志与列表内容的位置关系

注意:
虽然列表有3种属性,可以方便设置,
但是,我们实际使用中,往往把list-style-type 设为 none;
原因是:不同浏览器对于列表的渲染差别很大,
因此要通过css初始化,强制他们保持一致.


【文本控制】

【段落缩进:text-indent 】

 作用:控制一段首行的缩进距离.
 例: css选择器{text-indent:20px;}

【水平对齐:text-align】

  作用:控制文字在水平方向上的对齐方式
  例: css选择器{text-aligh:left;}  //可选值 left,right,center, 默认是left;

【文本装饰:text-decoration】

  作用:给文字加一些修饰线的效果.
  例:css选择器{text-decoration:underline;} // none,underline,overline,line-through,blink 

【字母间距:letter-spacing】

  作用:控制单个字符之间的距离
  例:css选择器{letter-spacing:20px;}
词间距:word-spacing (对中文无效);
   作用:控制单词与单词之间的距离
   例: css选择器{word-spacing:20px;}

【大小写转换:text-transform】

  作用:按一定规则转换字母的大小写
  例: css选择器{text-transform:uppercase;} // uppercase, lowercase,capitalize;
Capitalize: 是把首字母大写,其他字母不受影响.

【字体控制:】

【Font-style : 显示风格】

作用:控制文字的是否斜体显示或正常显示.
例: css选择器{font-style:italic;} //normal,oblique

【Font-weight: 字体粗细】

作用: 控制文字的粗细程度
例:css选择器{font-weight:bold;} //normal/bold

【Font-size: 字体大小】

作用:控制字体的大小
例:css选择器{font-size:30px;} //则每个字符以30像素的大小显示.

【Line-height: 行高】

作用:设置每行文字所占的高度,(特点:在一行内,文字总是相对于行居中显示,所以可以利用这个特性让文字相对于容器居中)
例: css选择器{line-height:30px;}// 则每一行占据30个像素高.

【Font-family: 设置字体】

作用:设置显示文字所用的字体.

?先英文字体,再中文中体
?先特殊字体,再安全字体
?先具体字体,再字体大类

注意: 当声明多个字体,如果某个字体名称含多个单词,或者中文字体,
则字体名用双引号包起来.

【表格学习】

基本语法:(以3行2列为例)
<table>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
</table>

CSS属性控制:
对于table:
Border-collapse: 边框是否融合.
可选值: separate(表格与表格相互独立的边框,默认值)
Collapse,(表格之间的边框共用).

Border-spacing: 边框间距
用法: border-spaing: xpx ypx (给两个像素值,分别代表单元格在x,y轴的距离)

Empty-cells: 空表格是否显示.
可选值: hide, show ,默认是hide

注意: 如果border-collapse值为 collapse时, border-spacing,和empty-cells 自动失效.

想让空表格显示的处理方式:
1:在空单元格里加一个空白符"&nbsp;";
2:让表格边框融合 collapse

表格的适用范围:
显示格式化数据
不适用于页面布局


【表单:】
收集页面的信息,送到服务器.

【表单总结:】

1:任何的类型的表单项,必有2个最本质的东西:
Name<------>value, 即 :变量名<--->变量值

2: 表单的action ,method
Action 代表 表单要提交到的地址.
Method 代表,表单提交的方法(即,表单数据如何发送.)

3:method的两种方法比较
Get与post,
Get提交,表单的值直接体现在浏览器上
Post提交,直接提交到action规则的url,url不变.

GET 提交直接把数据体现在地址栏上,不够安全.
而POST不改变地址栏,直接发送数据,因此注册这样的场合,适合用POST提交.

Get提交,因为数据在地址栏上体现,因此,能够提交的数据大小受限.(一般来说,受浏览器和服务器的具体限制). 一般来说,能够提交2K以内的数据.,
Post提交,理论上没有规定上限值.

Get无法上传文件类型
Post可以上传文件类型

【表单项:】

普通文本框: <input type="text" name="xx" value="xx" />
密码框: <input type="passwd"  name="xxx" value="xxx" />
单选按钮:<input type="radio" name="xxx" value="具体value" />
复选按钮: <input type="checkbox" name="xxx" value="具体value" />

提交:<input type="submit" value="提示文字" /> (一般不要加name)
重置:<input type="reset" value="提示文字" />

【下拉列表:】
<select name="xxx">
<option value="具体值">提示信息</option>
<option value="具体值">提示信息</option>
....................
</select>

【文本域:】
<textarea name="xxx"></textarea>

【文件域:】
<input type="file" name="xxx" />

【如何设置默认值:】

文件类型的表单项,不能设默认值
对于文本框,密码框, 在表单项里加 value="默认值", 即 :加value属性.
对于单选,复选框, 在表单项里加 checked="checked" ,即,checked属性为选中状态.
对于下拉列表, 在option选项里, 加 selected="selected",即selected属性为选中状态.
对于文本域,  直接在<textarea></textarea>之间,打上内容.

如何给表单项加默认值?
答:对于text 文本框,password密码框, 直接加value="xxx"
对于textarea 大块文本域, 默认值直接写在textarea标签之间

对于单选radio,和多选的checkbox
对于select 下拉框, 
Option选项加 selected="selected" 就能默认选中

【框架集:framset】

1:最外层的框架页面,doctype声明用 frameset 声明,不用strict
2:frameset页面,不能有body标签.

具体用法:
拆成2行为例:
<frameset rows="150px , *">
<frame src="源网页1" name="xxx" /> <!-- 推荐给frame加一个name,方便控制 --!>
<frame src="源网页2" name="yyy" /> 
</frameset>

拆成2列为例:
<frameset cols="20%,*">
<frame src="源网页1" name="xxx" /> <!-- 推荐给frame加一个name,方便控制 --!>
<frame src="源网页2" name="yyy" /> 
</frameset>



【html+css复习】

写一个网页的工作流程:
1: 划块,首页分析网页的效果图, 分析如何分块.
分块的原则: 从上到下,从左到右,从大到小.

2:布局:
盒子模型:
块状元素可以看成一个硬盒子.
盒子的属性: width,height,padding,border,margin, background
Background:体现的范围 with*height + padding

盒子有哪些特点:
1:默认情况下,盒子独占一行
2:盒子有宽,有高.
3:盒子可以设置外边距,即盒子与盒子之间的距离 
4:例子可以有边框,可以设置边框的精细,颜色,样式.
5:盒子与盒子内部的内容,可以保持一定距离,即内边距.

浮动模型:
当一个块状元素设置浮动之后 , 
应这样来看待此元素:  
此元素原地上升起一定高度,漂浮在半空中, 没浮动前所占的区域让出来.
所以后来的普通块状元素, 占据漂浮块原来的空间,因此,视觉上看,后来的块将被浮动块盖住.
如果后来的仍然是浮动元素,则认为两者浮动的高度一样,因此并排摆放.

如果不想让后来的被盖住,可以声明 clear: left/ right/ both,
分别代表,本块的上面不允许有左浮元素,右浮元素, 左右浮元素.


3: 填写内容, html标签, img, ul, h1,h2, P, span,

4:css细化控制显示效果
背景控制: background
文本控制: text-indent, text-align,text-decoration,
字体: 大小,行距,样式,粗细,字体
颜色控制: color

从整个网站的角度看, 我们如何工作?
1:首先观察所有的所有页面的布局,观察布局的共同点,进行归类.
2:引入初始经css
3:把布局相同的一类的页面,做出架子(包括html和css) 然后利用此页面做模板.
每个页面不同的部分,我们再写不同的css来单独控制.

也就是说: 做出的模板页面,应该有2个css文件, 1:初始化css, 2:模板框架css
例: template.html  + reset.css + frame.css
此时,以首页为例,index.html
那么,可以另存 template.html为index.html ,
再单独写一个 index.css ,专门负责控制首页的特殊的部分.

二级页面, sub.css












